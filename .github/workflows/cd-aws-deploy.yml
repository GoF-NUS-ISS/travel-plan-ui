#on:
#  release:
#    types: [created]
on:
  push:
    branches: [ master ]

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    #Pending - Run SAST Tool Here - Pending

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_REPO_SECRET_KEY }}

    #Pending - Run Unit tests or Integration Tests during build process using npm test commands
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: gofnusiss/travel-plan-ui:${{ github.sha }}

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

    #Pending - Run DAST Tool Here - Pending

    #Pending - Run Integration Automation Tests Here. These tests will Hit Docker container directly Here - Pending
    #Pending - However, if tests are executed during build phase, we can skip testing the docker container.

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: travel-plan-ui
        image: docker.io/gofnusiss/travel-plan-ui:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: service-travel-plan-ui
        cluster: travel-plan-app-env-prod
        wait-for-service-stability: true
